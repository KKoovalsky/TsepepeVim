*tsepepe.txt*             A humble plugin for C++ refactoring.

==============================================================================
Description

Allows to generate function definitions only, for now, but more features
are going to be implemented. ;)

Requires compilation database (compile_commands.json) to be held under the 
root directory of the project.

    1. Commands                             |tsepepe-commands|
    2. Per-project configuration            |tsepepe-project-config|

==============================================================================
1. Commands                                                  *tsepepe-commands*

                                                               *:TsepepeGenDef*
:TsepepeGenDef          Generates function definition in a corresponding source
                        file, from a function declared at line under cursor.

                        Firstly, decides where to put the definition. In case
                        the current file is a source file, then the definition
                        will be appended to the current file. If it is a header
                        file, then a paired C++ file is tried to be found. By a
                        paired C++ file, a file with the same stem, but 
                        different extension is meant. For example, for 'ff.hpp'
                        a paired C++ file name is 'ff.cpp', 'ff.cxx' or 'ff.cc'.
                        For 'ff.cpp' a paired C++ file name might be: 'ff.hpp',
                        'ff.h', 'ff.hxx' or 'ff.hh'.
                        
                        When a paired C++ file is found in the same directory,
                        where the current active file is located, then it takes
                        precedence. Otherwise, the paired C++ file is tried
                        to be found under the project root directory. Project
                        root directory is the directory where vim was run from.
                        Note, that if multiple paired files are found, then
                        the user is prompted to choose the proper file.
                        
                        After the paired C++ file is resolved the function
                        definition is generated. To generate the function 
                        definition it is mandatory to have the compilation 
                        database at hand. The plugin expects it to be located 
                        under the project root directory. In case you can't have 
                        it under the project root directory, or you use multiple 
                        compilation databases, see |tsepepe-project-config|.

                        Finally, the generated function definition is appended
                        to the paired C++ file. In case the file is already
                        open in a vim window, then the window is reused. 
                        Otherwise, a new window is open.

-------------------------------------------------------------------------------
:TsepepeImplIface {interfacename}                          *:TsepepeImplIface*

    Extends the class/struct under the cursor with the specified
    {interfacename}. The {interfacename} shall be the name specifed after the
    "struct" or "class" keyword; it shall not be the qualified name, which
    contains the scopes where the class/struct is located.

    The cursor position must be at any place of the class/struct definition.
    In case no class under cursor is found, then an error will be raised.

    After validating that the cursor is within a class, the codebase is
    searched for the interface with the {interfacename}. (By an interface an
    abstract class with pure virtual functions is considered.) When such an
    interface is found then:

        * Corresponding include will be added, if not already in place. The
        include path will simply be the filename containing the interface. The
        support for resolving the path for the include statement is not yet 
        supported, thus, this tool doesn't guarantee the path to the inlude is 
        valid (code may not compile).

        * The base-clause will be created (if empty), or extended, with
        the interface name and "public" access specifier.
    
        * All the pure virtual functions will be collected and put into the
        class body, below the first chain of public methods, or at the 
        beginning of the first "public" section within the class, if no public 
        method is found. In case there is no "public" section exists, such a
        section will be added.

-------------------------------------------------------------------------------
:TsepepeGoToCorrespondingFile                   *:TsepepeGoToCorrespondingFile*

    Switches to the window with the corresponding C++ file, which is the C++
    file that has the same stem (filename without the extension). If the file is
    already open in another window, then the window will be activated.
    Otherwise, it will be open anew.

    If there are multiple files with the same stem, then the paired file in
    the same directory will be chosen. In case no paired file is found in the 
    same directory, and multiple paired files are found across the project, then 
    the user will be prompted to choose one.

==============================================================================
2. Per-project configuration                          *tsepepe-project-config*

In case the 'compile_commands.json' cannot be held under the project root 
directory,  the '.tsepepe.yml' comes handy. You can specify file patterns
which are mapped to the compilation database directories. An example: >
    compile_db:
        - build_host/:
            - Application/Source/logic/.*
            - tests/host/.*
        - build_android/:
            - extras/android_tools/.*
        - build_device/:
            - .*
<

All the paths are calculated from the project root directory (the path where
the '.tsepepe.yml' is located).

The above example will map, e.g.:
    - Application/Source/logic/dumper.cpp -> build_host/
    - extras/android_tools/data_acquisitor/visitor.hpp -> build_android/
    - some/other/dir/yolo.cpp -> build_device/

The directories 'build_host/', 'build_android/', 'build_device/' must all 
contain compilation databases ('compile_commands.json' file).

The patterns in the second level lists are matched with ECMAScript regex.

The patterns are evaluated from the top to the bottom, thus it is recommended,
to keep the default match: '.*' as the last entry in the YML file.

To sum up, the '.tsepepe.yml' format is: >
    compile_db:
        - [directory with compilation database A]:
            - [matching ECMAScript regex pattern 1]
            - [matching ECMAScript regex pattern 2]
            - ...
        - [directory with compilation database B]:
            - [matching ECMAScript regex pattern 3]
            - [matching ECMAScript regex pattern 4]
        - ...
        - [directory with compilation database Z, a default match]:
            - .*
<

vim:tw=78:ts=8:ft=help:norl:
